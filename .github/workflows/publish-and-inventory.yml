name: Publish and inventory

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  format-and-inventory:
    runs-on: ubuntu-latest
    env:
      ROOT: Explorer
      OUT_CSV: docs/ProjectInventory.csv
      GH_PAT: ${{ secrets.GH_PAT }}

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      # ---------- ONE-TIME + GUARD: enforce LF for .luau ----------
      - name: Ensure .gitattributes rule for Luau (LF)
        id: gitattributes
        shell: bash
        run: |
          set -euo pipefail
          touch .gitattributes
          if ! grep -qxF "*.luau text eol=lf" .gitattributes; then
            echo "*.luau text eol=lf" >> .gitattributes
            echo "added_rule=true" >> "$GITHUB_OUTPUT"
          else
            echo "added_rule=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Renormalize tracked files to LF (if needed)
        if: ${{ steps.gitattributes.outputs.added_rule == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          git add .gitattributes
          git add --renormalize .
          if git diff --staged --quiet; then
            echo "No EOL changes to commit."
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "chore: enforce LF for .luau via .gitattributes + renormalize"

      - name: Push EOL normalization (safe) or open PR
        if: ${{ steps.gitattributes.outputs.added_rule == 'true' }}
        id: eol_push
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          remote_url="https://x-access-token:${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "$remote_url"

          git fetch origin main
          LOCAL=$(git rev-parse @)
          REMOTE=$(git rev-parse origin/main)
          BASE=$(git merge-base @ origin/main)

          if [ "$REMOTE" = "$BASE" ]; then
            git push origin HEAD:main
            echo "mode=direct" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          PR_BRANCH="normalize-luau-eol/${GITHUB_RUN_ID}"
          git push origin HEAD:"${PR_BRANCH}" --force-with-lease
          echo "mode=pr" >> "$GITHUB_OUTPUT"
          echo "pr_branch=${PR_BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Create PR for EOL normalization
        if: ${{ steps.eol_push.outputs.mode == 'pr' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT }}
          branch: ${{ steps.eol_push.outputs.pr_branch }}
          base: main
          title: "chore: enforce LF for .luau"
          body: "Adds .gitattributes rule and renormalizes tracked .luau files to LF."
          commit-message: "chore: enforce LF for .luau"
          labels: auto-generated
          draft: false
          delete-branch: true

      - name: Stop run (await EOL PR merge)
        if: ${{ steps.eol_push.outputs.mode == 'pr' }}
        run: |
          echo "EOL normalization PR opened; skipping formatting/inventory for this run."
          exit 0

      # ---------- FORMAT: StyLua reflows Explorer/**/*.luau ----------
      # Use the action directly with 'args' (no separate install/run step needed)
      - name: Format with StyLua
        uses: JohnnyMorganz/stylua-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest
          args: --config-path ./.stylua.toml Explorer

      - name: Commit formatted files (if any)
        id: fmt_commit
        shell: bash
        run: |
          set -euo pipefail
          if git status --porcelain | grep -q .; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "style: format Luau with StyLua"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "No formatting changes."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Push formatting (safe) or open PR
        if: ${{ steps.fmt_commit.outputs.changed == 'true' }}
        id: fmt_push
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          remote_url="https://x-access-token:${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "$remote_url"

          git fetch origin main
          LOCAL=$(git rev-parse @)
          REMOTE=$(git rev-parse origin/main)
          BASE=$(git merge-base @ origin/main)

          if [ "$REMOTE" = "$BASE" ]; then
            git push origin HEAD:main
            echo "mode=direct" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          PR_BRANCH="stylua/format-${GITHUB_RUN_ID}"
          git push origin HEAD:"${PR_BRANCH}" --force-with-lease
          echo "mode=pr" >> "$GITHUB_OUTPUT"
          echo "pr_branch=${PR_BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Create PR for formatting
        if: ${{ steps.fmt_push.outputs.mode == 'pr' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT }}
          branch: ${{ steps.fmt_push.outputs.pr_branch }}
          base: main
          title: "style: format Luau with StyLua"
          body: "Automated formatting of Explorer/**/*.luau via StyLua."
          commit-message: "style: format Luau with StyLua"
          labels: auto-generated
          draft: false
          delete-branch: true

      - name: Stop run (await formatting PR merge)
        if: ${{ steps.fmt_push.outputs.mode == 'pr' }}
        run: |
          echo "Formatting PR opened; skipping inventory for this run."
          exit 0

      # ---------- INVENTORY: generate CSV pinned to post-format commit ----------
      - name: Record source commit SHA (pin URLs)
        run: echo "SOURCE_SHA=$(git rev-parse HEAD)" >> "$GITHUB_ENV"

      - name: Generate docs/ProjectInventory.csv (pinned raw URLs + wc-style line_count)
        env:
          ROOT: ${{ env.ROOT }}
          OUT_CSV: ${{ env.OUT_CSV }}
          SOURCE_SHA: ${{ env.SOURCE_SHA }}
          REPO_SLUG: ${{ github.repository }}
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import csv, os, sys
          ROOT        = os.environ.get("ROOT", "Explorer")
          OUT_CSV     = os.environ.get("OUT_CSV", "docs/ProjectInventory.csv")
          SOURCE_SHA  = os.environ["SOURCE_SHA"]
          REPO_SLUG   = os.environ["REPO_SLUG"]

          base = os.getcwd()
          rows = []
          if os.path.isdir(ROOT):
            for dirpath, dirnames, filenames in os.walk(ROOT):
              dirnames.sort()
              for fn in sorted(filenames):
                if not fn.lower().endswith(".luau"):
                  continue
                full = os.path.join(dirpath, fn)
                rel  = os.path.relpath(full, base).replace("\\", "/")
                with open(full, "rb") as fh:
                  raw = fh.read()
                line_count = raw.count(b"\n")  # wc -l semantics
                byte_size  = len(raw)
                raw_url    = f"https://raw.githubusercontent.com/{REPO_SLUG}/{SOURCE_SHA}/{rel}"
                rows.append([os.path.basename(rel), rel, raw_url, SOURCE_SHA, line_count, byte_size])

          os.makedirs(os.path.dirname(OUT_CSV), exist_ok=True)
          with open(OUT_CSV, "w", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            w.writerow(["filename","repo_path","raw_repo_url","commit_sha","line_count","byte_size"])
            w.writerows(rows)
          print(f"Wrote {OUT_CSV} with {len(rows)} entries at commit {SOURCE_SHA}")
          PY

      - name: Commit & push ProjectInventory.csv (if changed)
        id: inv_commit
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          OUT_CSV: ${{ env.OUT_CSV }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${OUT_CSV}" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git commit -m "chore: regenerate ProjectInventory.csv (pinned raw URLs + line_count)"
          remote_url="https://x-access-token:${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "$remote_url"
          git fetch origin main
          LOCAL=$(git rev-parse @)
          REMOTE=$(git rev-parse origin/main)
          BASE=$(git merge-base @ origin/main)
          if [ "$REMOTE" = "$BASE" ]; then
            git push origin HEAD:main
            echo "pr_branch=" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          pr_branch="projectinventory/update-${GITHUB_RUN_ID}"
          git push origin HEAD:"${pr_branch}" --force-with-lease
          echo "pr_branch=${pr_branch}" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request for inventory
        if: ${{ steps.inv_commit.outputs.pr_branch != '' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT }}
          branch: ${{ steps.inv_commit.outputs.pr_branch }}
          base: main
          title: "chore: regenerate ProjectInventory.csv (pinned raw URLs + line_count)"
          body: "Auto-generated inventory pinned to the commit used for generation."
          commit-message: "chore: regenerate ProjectInventory.csv (pinned raw URLs + line_count)"
          labels: auto-generated
          draft: false
          delete-branch: true
