Rizz City – System Setup Summary
Last Updated: 2025-09-06 (rev. 1.3)

Purpose
This document explains the canonical project workflow and where project context is stored so ChatGPT (the assistant) can reliably access current scripts, history, and archives.

Primary principles
- GitHub is the single source of truth for all .luau script source code.
- Chat logs, design notes, and historical context live in the project folder (`docs/chat-logs/*.txt`) and are used for reasoning only (not as canonical code).
- The assistant should load SystemSetup.txt at the start of any chat and follow the procedures described.

Components
1) GitHub Repo (Live source of truth)
   - Repository: `Rhocwud/RizzCity` (private by default)
   - Canonical files:
     - `Explorer/` — directory mirroring Roblox Studio’s Explorer; contains all `.luau` files and preserves hierarchy
     - `docs/ProjectFileLinks.txt` — autogenerated mapping of Explorer paths → raw.githubusercontent.com URLs (if available)
     - `docs/ProjectInventory.csv` — autogenerated inventory CSV with metadata (filename, repo_path, gist_filename, raw_gist_url, line_count, byte_size)
   - The assistant reads `docs/ProjectInventory.csv` then `docs/ProjectFileLinks.txt` to discover code. The CSV is authoritative for metadata (line counts, sizes); ProjectFileLinks provides repo raw URLs when applicable.

2) Local development / sync
   - Developer (Tyler) uses Roblox Studio → **Sync to Disk** to mirror the Studio Explorer to a local folder that is a Git repo working tree (the `Explorer/` folder).
   - Developer commits & pushes changes using GitHub Desktop / CLI. Pushing `main` updates the live repo.

3) Automation (inventory + raw access)
   - A GitHub Action (`publish-and-inventory.yml`) runs on schedule or manually and does:
     - collects `.luau` files under `Explorer/`
     - (optional) creates a private Gist snapshot containing those files
     - generates `docs/ProjectInventory.csv` with `raw_gist_url` entries (and `byte_size` and `line_count`)
     - commits `docs/ProjectInventory.csv` back to the repo if it changed
   - A second Action (`generate-projectfilelinks.yml`) generates or updates `docs/ProjectFileLinks.txt` with `raw.githubusercontent.com` URLs when appropriate.
   - NOTE: Because `raw.githubusercontent.com` serves raw repo files publicly only for **public** repos, the recommended pattern for private repos is:
     - keep the repo private; use the gist snapshot `raw` URLs in `ProjectInventory.csv` for assistant & tooling access, **or**
     - publish a selective public mirror of only the `.luau` files if you prefer stable public raw URLs. The CSV will record whichever `raw` URLs are available.
	 NOTE: The workflow uses a Personal Access Token stored as a repository Secret named `GH_PAT`.  Do NOT paste tokens into chat. The assistant will never request tokens in-chat; the token must be added in Repository → Settings → Secrets and kept private.
	
Automation workflows expected:
  - `.github/workflows/publish-and-inventory.yml`  # creates gist (optional) + ProjectInventory.csv
  - `.github/workflows/generate-projectfilelinks.yml`  # generates docs/ProjectFileLinks.txt (raw.githubusercontent URLs or fallback)

- Add `.gitattributes` to enforce LF for `.luau` files and a `scripts/normalize_newlines.py` to ensure snapshots preserve newlines for the assistant and raw outputs.

4) Chat logs (Project Folder)
   - Stored in repo under `docs/chat-logs/` (files named `YYYYMMDD_topic.txt`).
   - Use these logs for historical reasoning and context only. Do NOT treat code snippets in chat logs as canonical source code.

How the assistant (ChatGPT) should behave at the start of a new chat
1. Load `SystemSetup.txt` from the repo root. This file sets rules and file locations.  
2. Read `docs/ProjectInventory.csv` (primary) then `docs/ProjectFileLinks.txt` (secondary) to discover current active code and raw URLs. The assistant prefers `ProjectInventory.csv`'s `raw_gist_url` field (if present). If `raw_gist_url` is missing / inaccessible, then the assistant will fall back to `docs/ProjectFileLinks.txt`.
3. If a file is requested or Tyler is working on a task, fetch the file from the `raw` URL recorded in `docs/ProjectInventory.csv` (preferred). If that `raw` URL points to a gist/raw that is reachable, fetch and show requested lines. If `raw` URL is 403 or missing, consult `docs/ProjectFileLinks.txt` for fallback repo raw URLs or ask the developer to re-run the inventory workflow (do not request PATs in chat).  
4. If system-history or design reasoning is required, consult `docs/chat-logs/*`, `Index.txt`, or `Project Changelog.txt`.

Notes & edge cases
- Non-code assets (Workspace parts, RemoteEvents, models) are not automatically exported. The developer must explicitly export or describe these in `docs/` or include them in a repository folder (e.g., `exports/`) for the assistant to read.  
- Newline / formatting: ensure Roblox Studio Sync to Disk preserves newlines. If files appear as a single long line in raw outputs, run `scripts/normalize_newlines.py` before snapshotting; also add a `.gitattributes` rule to enforce LF for `.luau`: