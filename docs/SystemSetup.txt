Rizz City – System Setup Summary
Last Updated: 2025-09-07 (rev. 1.4)

Purpose
This document explains the canonical project workflow and where project context is stored so ChatGPT (the assistant) can reliably access current scripts, history, and archives.

Primary principles
- GitHub is the single source of truth for all `.luau` script source code.
- Chat logs, design notes, and historical context live in the project folder (`docs/chat-logs/*.txt`) and are used for reasoning only (not as canonical code).
- The assistant should load SystemSetup.txt at the start of any chat and follow the procedures described.

Components
1) GitHub Repo (Live source of truth)
   - Repository: `Rhocwud/RizzCity` (private by default)
   - Canonical files:
     - `Explorer/` — directory mirroring Roblox Studio’s Explorer; contains all `.luau` files and preserves hierarchy
     - `docs/ProjectInventory.csv` — autogenerated inventory CSV with metadata (filename, repo_path, gist_filename, raw_gist_url, line_count, byte_size). This CSV is the authoritative inventory artifact.
     - `docs/ProjectFileLinks.txt` — autogenerated mapping of Explorer repo paths → raw.githubusercontent.com URLs (when applicable). This file is a convenience / fallback and may be omitted for private repos.
   - The assistant reads `docs/ProjectInventory.csv` first (preferred) and then `docs/ProjectFileLinks.txt` as a fallback for repo raw URLs.

2) Local development / sync
   - Developer (Tyler) uses Roblox Studio → **Sync to Disk** to mirror the Studio Explorer to a local folder that is a Git repo working tree (the `Explorer/` folder).
   - Developer commits & pushes changes using GitHub Desktop / CLI. Pushing `main` updates the live repo.

3) Automation (inventory + raw access)
   - Canonical scheduled workflow:
     - `.github/workflows/publish-and-inventory.yml` — runs on schedule (recommended 30 minutes) or manual dispatch. Responsibilities:
       - collects `.luau` files under `Explorer/`
       - normalizes newlines where necessary (LF)
       - creates a **private gist snapshot** (optional by config) and obtains `raw_gist_url` entries
       - writes `docs/ProjectInventory.csv` including `raw_gist_url`, `line_count`, and `byte_size`
       - commits `docs/ProjectInventory.csv` back to the repo if changed (safe push policy: push to `main` if safe; otherwise open a PR)
   - Supplementary workflow:
     - `.github/workflows/generate-projectfilelinks.yml` — produces `docs/ProjectFileLinks.txt` mapping `Explorer/<path>` → `https://raw.githubusercontent.com/...` URLs.
       - **Recommended**: remove the schedule from this workflow and keep `workflow_dispatch` (manual) or `push: branches: [main]` only; do not run it on an independent frequent schedule if `publish-and-inventory` is scheduled.
   - Token & secrets:
     - The automation uses a Personal Access Token stored as a repository Secret named `GH_PAT`.
     - Required scopes (minimum): `repo` (full repo access) and `gist` (create private gists). Add `workflow` scope only if you need the token to dispatch other workflows.
     - **Do NOT paste tokens in chat.** The assistant will never request tokens in-chat and will instruct you to set the secret in GitHub settings.
   - Commit / PR behavior:
     - Workflow will attempt a safe direct push to `main` if the remote did not change since checkout.
     - If `main` advanced (diverged) while the run executed, the workflow will push to a new branch `projectinventory/update-<run_id>` and open a PR for manual review. This avoids CI attempting risky auto-merges/rebases.

4) Chat logs (Project Folder)
   - Stored in repo under `docs/chat-logs/` (files named `YYYYMMDD_topic.txt`).
   - Use these logs for historical reasoning and context only. Do NOT treat code snippets in chat logs as canonical source code.

How the assistant (ChatGPT) should behave at the start of a new chat
1. Load `SystemSetup.txt` from the repo root first. This sets the rules, workflow names, and file locations.
2. Read `docs/ProjectInventory.csv` (primary) then `docs/ProjectFileLinks.txt` (secondary) to discover current active code and raw URLs.
   - Prefer `ProjectInventory.csv`'s `raw_gist_url` field (if present and reachable).
   - If `raw_gist_url` is missing or returns 403, fall back to `docs/ProjectFileLinks.txt` for `raw.githubusercontent.com` URLs (if present). If both are unavailable, ask the developer to re-run the inventory workflow. **Do not request secrets in chat.**
3. When a specific file or lines are requested by the developer:
   - Fetch from the `raw_gist_url` in `ProjectInventory.csv` (preferred) and return the requested lines with an exact citation to the raw URL and line numbers.
   - If `raw_gist_url` is inaccessible, fetch the raw.githubusercontent URL from `ProjectFileLinks.txt` if available.
   - If both are inaccessible, instruct developer to re-run `publish-and-inventory` (manual run or check Actions) and do not request tokens via chat.
4. For code edits:
   - Provide patch diffs, complete replacement content, or Actions-ready workflow snippets.
   - When code must be committed, instruct the developer what to paste and where (which script type: ModuleScript, LocalScript, Server Script, etc.) and prefer creating PR-ready changes rather than pushing directly to main unless the developer has explicitly asked for direct push.
5. For system-history and design reasoning:
   - Consult `docs/chat-logs/*`, `Index.txt`, or `Project Changelog.txt`. Use these only for context and not as canonical code.

Notes & edge cases
- Non-code assets (Workspace parts, RemoteEvents, models) are not automatically exported. Developer should export these to `docs/exports/` or include instructions in `docs/` for the assistant to read.
- Newline / formatting:
  - Add `.gitattributes` at repo root with `*.luau text eol=lf` to help enforce LF on commit.
  - Use `scripts/normalize_newlines.py` (or the workflow’s inline perl command) as a pre-snapshot normalization step if any raw outputs appear as single-line files.
- File locations (recommended)
  - `.github/workflows/publish-and-inventory.yml`
  - `.github/workflows/generate-projectfilelinks.yml` (manual or push-on-main only)
  - `docs/ProjectInventory.csv` (canonical inventory artifact)
  - `docs/ProjectFileLinks.txt` (fallback links)
  - `scripts/create_gist_and_inventory.py` (optional alternative to inline workflow Python)
  - `scripts/normalize_newlines.py` (optional)
  - `.gitattributes` (repo root)
- Security reminder:
  - Rotate `GH_PAT` regularly. Store it as `GH_PAT` in repo secrets. The assistant will never request or accept the token in chat.

Appendix — Helpful snippets
- Recommended `.gitattributes` (paste to repo root): *.luau text eol=lf
